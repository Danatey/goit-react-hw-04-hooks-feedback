{"version":3,"sources":["Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/StatisticCounter/StatisticCounter.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","positivePercentage","FeedbackOptions","options","onLeaveFeedback","className","map","btnName","id","type","onClick","prorTypes","ProrTypes","func","string","node","Section","title","children","defaultProps","StatisticCounter","useState","setGood","setNeutral","setBad","countTotalFeedback","event","currValue","target","outerText","increment","prevState","btnOptions","total","Math","ceil","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAmBeA,EAjBI,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,mBACtC,OAAO,gCACH,4CACA,sCAASH,KACT,yCAAYC,KACZ,qCAAQC,KACR,qDAAwBC,S,gBCJ1BC,G,MAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,qBAAKC,UAAU,kBAAf,SACGF,EAAQG,KAAI,YAAsB,IAAnBC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GACvB,OACE,wBAEEC,KAAK,SACLC,QAASN,EAHX,SAIEG,GAHKC,UAUfN,EAAgBS,UAAY,CAC1BP,gBAAiBQ,IAAUC,KAC3BL,GAAII,IAAUE,OACdX,QAASS,IAAUG,MAGNb,QCrBTc,G,MAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,OAILF,EAAQG,aAAe,CACrBF,MAAO,IAQMD,Q,OC2CAI,EAvDU,WACvB,MAAwBC,mBAAS,GAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBwB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOrB,EAAP,KAAYwB,EAAZ,KAiBMC,EAAqB,WACvB,OAAO3B,EAAOC,EAAUC,GAO5B,OACE,qCACI,cAAC,EAAD,CAASiB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEb,gBA3Bc,SAAAsB,GACtB,IAAMC,EAAYD,EAAME,OAAOC,UACzBC,EAAY,SAAAC,GAAS,OAAIA,EAAY,GAE3C,MAAgB,SAAZJ,EACKL,EAAQQ,GAED,YAAZH,EACKJ,EAAWO,GAEJ,QAAZH,EACKH,EAAOM,QADhB,GAkBQ3B,QAAW6B,MAGf,cAAC,EAAD,CAASf,MAAM,sBAAf,SACGnB,EAAO,GACRC,EAAU,GACVC,EAAM,EACJ,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLiC,MAAOR,IACPxB,mBApBDiC,KAAKC,KAAa,IAAPrC,EAAc2B,OAuB1B,wDC9CGW,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.78d42165.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, positivePercentage }) => {\r\n    return <div>\r\n        <h2>Statistics</h2>\r\n        <p>Good:{good}</p>\r\n        <p>Neutral:{neutral}</p>\r\n        <p>Bad:{bad}</p>\r\n        <p>Positive percentage:{positivePercentage}</p>\r\n    </div>\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    positivePercentage: PropTypes.number\r\n}\r\n\r\nexport default Statistics","import ProrTypes from 'prop-types'\r\n\r\nimport './FeedbackOptions.scss'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div className=\"FeedbackOptions\">\r\n    {options.map(({ btnName, id }) => {\r\n      return (\r\n        <button\r\n          key={id}\r\n          type=\"button\"\r\n          onClick={onLeaveFeedback}\r\n        >{btnName}\r\n        </button>\r\n      );\r\n    })}\r\n  </div>\r\n);\r\n\r\nFeedbackOptions.prorTypes = {\r\n  onLeaveFeedback: ProrTypes.func,\r\n  id: ProrTypes.string,\r\n  options: ProrTypes.node,\r\n}\r\n\r\nexport default FeedbackOptions","import PropTypes from \"prop-types\"\r\n\r\nimport './Section.scss'\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h1>{title}</h1>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section","import { useState } from \"react\";\r\n\r\nimport Statistics from \"../Statistics\";\r\nimport FeedbackOptions from \"../FeedbackOptions\";\r\nimport Section from \"../Section/Section\";\r\n\r\nimport btnOptions from \"../../options.json\"\r\n\r\nconst StatisticCounter = () => {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const onLeaveFeedback = event => {\r\n    const currValue = event.target.outerText;\r\n    const increment = prevState => prevState + 1;\r\n    \r\n    if (currValue===\"Good\") {\r\n      return setGood(increment);\r\n    }\r\n    if (currValue===\"Neutral\") {\r\n      return setNeutral(increment);\r\n    }\r\n    if (currValue===\"Bad\") {\r\n      return setBad(increment);\r\n    }\r\n  };\r\n  \r\n  const countTotalFeedback = () => {\r\n      return good + neutral + bad;\r\n  };\r\n\r\n  const countFeedbackPercentage = () => {\r\n      return Math.ceil((good * 100) / countTotalFeedback());\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            onLeaveFeedback={onLeaveFeedback}\r\n            options = {btnOptions}\r\n        />\r\n        </Section>\r\n        <Section title=\"Statistics overview\">\r\n          {good > 0 ||\r\n          neutral > 0 ||\r\n          bad > 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={countTotalFeedback()}\r\n              positivePercentage={countFeedbackPercentage()}\r\n            />\r\n          ) : (\r\n            <p>No feedback given</p>\r\n          )}\r\n          </Section>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default StatisticCounter\r\n\r\n// class OldStatisticCounter extends Component {\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   onLeaveFeedback = event => {\r\n//   const currValue = event.target.outerText;\r\n  \r\n//   if (currValue===\"Good\") {\r\n//       this.setState(prevState => ({\r\n//         good: prevState.good + 1,\r\n//       }));\r\n//       return;\r\n//     }\r\n//     if (currValue===\"Neutral\") {\r\n//       this.setState(prevState => ({\r\n//         neutral: prevState.neutral + 1,\r\n//       }));\r\n//       return;\r\n//     }\r\n//     if (currValue===\"Bad\") {\r\n//       this.setState(prevState => ({\r\n//         bad: prevState.bad + 1,\r\n//       }));\r\n//       return;\r\n//     }\r\n//   };\r\n  \r\n//   countTotalFeedback = () => {\r\n//       return this.state.good + this.state.neutral + this.state.bad;\r\n//   };\r\n\r\n//   countFeedbackPercentage = () => {\r\n//       return Math.ceil((this.state.good * 100) / this.countTotalFeedback());\r\n//   };\r\n\r\n//   render() {\r\n//     const { good, neutral, bad } = this.state;\r\n//     return (\r\n//       <>\r\n//         <Section title=\"Please leave feedback\">\r\n//           <FeedbackOptions\r\n//             onLeaveFeedback={this.onLeaveFeedback}\r\n//             options = {btnOptions}\r\n//         />\r\n//         </Section>\r\n//         <Section title=\"Statistics overview\">\r\n//           {this.state.good > 0 ||\r\n//           this.state.neutral > 0 ||\r\n//           this.state.bad > 0 ? (\r\n//             <Statistics\r\n//               good={good}\r\n//               neutral={neutral}\r\n//               bad={bad}\r\n//               total={this.countTotalFeedback()}\r\n//               positivePercentage={this.countFeedbackPercentage()}\r\n//             />\r\n//           ) : (\r\n//             <p>No feedback given</p>\r\n//           )}\r\n//           </Section>\r\n//       </>\r\n//     )\r\n//   }\r\n// }\r\n\r\n","import StatisticCounter from \"./Components/StatisticCounter\";\n\nfunction App() {\n  return (\n    <>\n      <StatisticCounter />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}